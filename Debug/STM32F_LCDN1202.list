
STM32F_LCDN1202.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08001d44  08001d44  00011d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002074  08002074  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002074  08002074  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002074  08002074  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800207c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000028  080020a4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  080020a4  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031ec  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001102  00000000  00000000  0002323c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00024340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00024798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e294  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005709  00000000  00000000  00032ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000537cd  00000000  00000000  000384e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008bcb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d48  00000000  00000000  0008bd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d2c 	.word	0x08001d2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08001d2c 	.word	0x08001d2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcdn1202_init>:
#include "lcd_n1202.h"
#include "lcd_n1202_stm32f.h"
#include "font.h"

void lcdn1202_init()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	lcdn1202_gpio_init();
 8000224:	f000 fa30 	bl	8000688 <lcdn1202_gpio_init>

	//Hard Reset -> By HW using R-C

	HAL_Delay(10);
 8000228:	200a      	movs	r0, #10
 800022a:	f000 fea1 	bl	8000f70 <HAL_Delay>

	lcdn1202_sendcom(0xE2);	//Soft Reset
 800022e:	20e2      	movs	r0, #226	; 0xe2
 8000230:	f000 f81e 	bl	8000270 <lcdn1202_sendcom>
	HAL_Delay(1);
 8000234:	2001      	movs	r0, #1
 8000236:	f000 fe9b 	bl	8000f70 <HAL_Delay>
	lcdn1202_sendcom(0xA4); //Normal Display Mode
 800023a:	20a4      	movs	r0, #164	; 0xa4
 800023c:	f000 f818 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x2F);	//Power Control = Max (Booster On, VReg On, VFol On)
 8000240:	202f      	movs	r0, #47	; 0x2f
 8000242:	f000 f815 	bl	8000270 <lcdn1202_sendcom>

	lcdn1202_sendcom(0xA0); //Segment Driver Direction = Normal (lines start at left)
 8000246:	20a0      	movs	r0, #160	; 0xa0
 8000248:	f000 f812 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0xC0); //Common Driver Direction = Normal
 800024c:	20c0      	movs	r0, #192	; 0xc0
 800024e:	f000 f80f 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x80|16); //Set Contrast to default
 8000252:	2090      	movs	r0, #144	; 0x90
 8000254:	f000 f80c 	bl	8000270 <lcdn1202_sendcom>

	lcdn1202_sendcom(0xAF);	//Display On
 8000258:	20af      	movs	r0, #175	; 0xaf
 800025a:	f000 f809 	bl	8000270 <lcdn1202_sendcom>

	LCD_BL_OFF(); //Backlight off
 800025e:	f000 fa0b 	bl	8000678 <LCD_BL_OFF>
	LCD_clear();  //Clear pixel memory
 8000262:	f000 f9b3 	bl	80005cc <LCD_clear>
	LCD_BL_ON();  //Backlight on
 8000266:	f000 fa00 	bl	800066a <LCD_BL_ON>
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <lcdn1202_sendcom>:

void lcdn1202_sendcom(unsigned char ssd1306com)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	0002      	movs	r2, r0
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	701a      	strb	r2, [r3, #0]
	lcdn1202_9bsend(0,ssd1306com); //Send Command
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	0019      	movs	r1, r3
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fa3a 	bl	80006fc <lcdn1202_9bsend>
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <lcdn1202_senddat>:

void lcdn1202_senddat(unsigned char ssd1306dat)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	701a      	strb	r2, [r3, #0]
	lcdn1202_9bsend(1,ssd1306dat); //Send Data
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	0019      	movs	r1, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 fa2a 	bl	80006fc <lcdn1202_9bsend>
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b002      	add	sp, #8
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <lcdn1202_setpos>:

void lcdn1202_setpos(unsigned char row, unsigned char col)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	0002      	movs	r2, r0
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	701a      	strb	r2, [r3, #0]
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	1c0a      	adds	r2, r1, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	lcdn1202_sendcom(0xB0|(row&0x0F)); //Set page of row
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	220f      	movs	r2, #15
 80002ca:	4013      	ands	r3, r2
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	2250      	movs	r2, #80	; 0x50
 80002d0:	4252      	negs	r2, r2
 80002d2:	4313      	orrs	r3, r2
 80002d4:	b25b      	sxtb	r3, r3
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	0018      	movs	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x00|(col&0x0F)); //Set lower nibble of Column
 80002de:	1dbb      	adds	r3, r7, #6
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	220f      	movs	r2, #15
 80002e4:	4013      	ands	r3, r2
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	0018      	movs	r0, r3
 80002ea:	f7ff ffc1 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_sendcom(0x10|((col>>4)&0x0F)); //Set upper nibble of Column
 80002ee:	1dbb      	adds	r3, r7, #6
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	091b      	lsrs	r3, r3, #4
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	2210      	movs	r2, #16
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ffb5 	bl	8000270 <lcdn1202_sendcom>
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}

0800030e <lcdn1202_clear>:

void lcdn1202_clear()
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b082      	sub	sp, #8
 8000312:	af00      	add	r7, sp, #0
	unsigned char col,row;
	lcdn1202_setpos(0,0);
 8000314:	2100      	movs	r1, #0
 8000316:	2000      	movs	r0, #0
 8000318:	f7ff ffca 	bl	80002b0 <lcdn1202_setpos>
  	for(row=0;row<LCDN1202_ROW;row++)	//Scan rows (pages)
 800031c:	1dbb      	adds	r3, r7, #6
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	e014      	b.n	800034e <lcdn1202_clear+0x40>
  	   {
      		for(col=0;col<LCDN1202_COL;col++)	//Scan columns
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e007      	b.n	800033c <lcdn1202_clear+0x2e>
      		   {
        		lcdn1202_senddat(0);	//Send 0 to every pixel
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ffaf 	bl	8000290 <lcdn1202_senddat>
      		for(col=0;col<LCDN1202_COL;col++)	//Scan columns
 8000332:	1dfb      	adds	r3, r7, #7
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	3201      	adds	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b5f      	cmp	r3, #95	; 0x5f
 8000342:	d9f3      	bls.n	800032c <lcdn1202_clear+0x1e>
  	for(row=0;row<LCDN1202_ROW;row++)	//Scan rows (pages)
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	1dbb      	adds	r3, r7, #6
 800034a:	3201      	adds	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	1dbb      	adds	r3, r7, #6
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b08      	cmp	r3, #8
 8000354:	d9e6      	bls.n	8000324 <lcdn1202_clear+0x16>
      		   }
  	   }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}

08000360 <LCD_setpos>:

void LCD_setpos(unsigned char row, unsigned char col)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	0002      	movs	r2, r0
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	1dbb      	adds	r3, r7, #6
 800036e:	1c0a      	adds	r2, r1, #0
 8000370:	701a      	strb	r2, [r3, #0]
	lcdn1202_setpos(row,col); //Set coordinate (for LCD_drawbyte)
 8000372:	1dbb      	adds	r3, r7, #6
 8000374:	781a      	ldrb	r2, [r3, #0]
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	0011      	movs	r1, r2
 800037c:	0018      	movs	r0, r3
 800037e:	f7ff ff97 	bl	80002b0 <lcdn1202_setpos>
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b002      	add	sp, #8
 8000388:	bd80      	pop	{r7, pc}

0800038a <LCD_drawbyte>:

void LCD_drawbyte(unsigned char dbyte)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b082      	sub	sp, #8
 800038e:	af00      	add	r7, sp, #0
 8000390:	0002      	movs	r2, r0
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	701a      	strb	r2, [r3, #0]
	lcdn1202_senddat(dbyte); //Send 1 byte data only
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	0018      	movs	r0, r3
 800039c:	f7ff ff78 	bl	8000290 <lcdn1202_senddat>
}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b002      	add	sp, #8
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <LCD_drawchar>:

void LCD_drawchar(unsigned char chr, unsigned char chrrow, unsigned char chrcol)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	0004      	movs	r4, r0
 80003b0:	0008      	movs	r0, r1
 80003b2:	0011      	movs	r1, r2
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	1c22      	adds	r2, r4, #0
 80003b8:	701a      	strb	r2, [r3, #0]
 80003ba:	1dbb      	adds	r3, r7, #6
 80003bc:	1c02      	adds	r2, r0, #0
 80003be:	701a      	strb	r2, [r3, #0]
 80003c0:	1d7b      	adds	r3, r7, #5
 80003c2:	1c0a      	adds	r2, r1, #0
 80003c4:	701a      	strb	r2, [r3, #0]
	unsigned char ci,fchar;
	unsigned int chridx;

	lcdn1202_setpos(chrrow,chrcol);
 80003c6:	1d7b      	adds	r3, r7, #5
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	1dbb      	adds	r3, r7, #6
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	0011      	movs	r1, r2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f7ff ff6d 	bl	80002b0 <lcdn1202_setpos>

	if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation Area
 80003d6:	1dfb      	adds	r3, r7, #7
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b1f      	cmp	r3, #31
 80003dc:	d92e      	bls.n	800043c <LCD_drawchar+0x94>
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	b25b      	sxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db29      	blt.n	800043c <LCD_drawchar+0x94>
	  {
	    lcdn1202_senddat(0x00);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ff51 	bl	8000290 <lcdn1202_senddat>
            chridx=(chr-32)*5; //Start at character 32 (Space). 5 columns for each character
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	3b20      	subs	r3, #32
 80003f4:	001a      	movs	r2, r3
 80003f6:	0013      	movs	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	189b      	adds	r3, r3, r2
 80003fc:	613b      	str	r3, [r7, #16]
            for(ci=0;ci<5;ci++)
 80003fe:	2317      	movs	r3, #23
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	e013      	b.n	8000430 <LCD_drawchar+0x88>
		{
		   fchar = font_arr[chridx+ci]; //Get character pattern from Font Array
 8000408:	2417      	movs	r4, #23
 800040a:	193b      	adds	r3, r7, r4
 800040c:	781a      	ldrb	r2, [r3, #0]
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	18d2      	adds	r2, r2, r3
 8000412:	200f      	movs	r0, #15
 8000414:	183b      	adds	r3, r7, r0
 8000416:	4923      	ldr	r1, [pc, #140]	; (80004a4 <LCD_drawchar+0xfc>)
 8000418:	5c8a      	ldrb	r2, [r1, r2]
 800041a:	701a      	strb	r2, [r3, #0]
		   lcdn1202_senddat(fchar); //Send pattern 1 byte at a time
 800041c:	183b      	adds	r3, r7, r0
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	0018      	movs	r0, r3
 8000422:	f7ff ff35 	bl	8000290 <lcdn1202_senddat>
            for(ci=0;ci<5;ci++)
 8000426:	193b      	adds	r3, r7, r4
 8000428:	781a      	ldrb	r2, [r3, #0]
 800042a:	193b      	adds	r3, r7, r4
 800042c:	3201      	adds	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
 8000430:	2317      	movs	r3, #23
 8000432:	18fb      	adds	r3, r7, r3
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b04      	cmp	r3, #4
 8000438:	d9e6      	bls.n	8000408 <LCD_drawchar+0x60>
	if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation Area
 800043a:	e02f      	b.n	800049c <LCD_drawchar+0xf4>
		}
          }
 	else if((chr>127)&&(chr<148))	//Frame & Arrow Area
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b25b      	sxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	da2a      	bge.n	800049c <LCD_drawchar+0xf4>
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b93      	cmp	r3, #147	; 0x93
 800044c:	d826      	bhi.n	800049c <LCD_drawchar+0xf4>
	  {
	    chridx=(chr-128)*8; //Start at index 128. 5 columns for each symbol
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	3b80      	subs	r3, #128	; 0x80
 8000454:	00db      	lsls	r3, r3, #3
 8000456:	613b      	str	r3, [r7, #16]
            for(ci=0;ci<8;ci++)
 8000458:	2317      	movs	r3, #23
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e016      	b.n	8000490 <LCD_drawchar+0xe8>
		{
 		   fchar = font_arr[chridx+480+ci]; //Get symbol pattern from Font Array
 8000462:	2417      	movs	r4, #23
 8000464:	193b      	adds	r3, r7, r4
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	18d3      	adds	r3, r2, r3
 800046c:	33e1      	adds	r3, #225	; 0xe1
 800046e:	33ff      	adds	r3, #255	; 0xff
 8000470:	001a      	movs	r2, r3
 8000472:	200f      	movs	r0, #15
 8000474:	183b      	adds	r3, r7, r0
 8000476:	490b      	ldr	r1, [pc, #44]	; (80004a4 <LCD_drawchar+0xfc>)
 8000478:	5c8a      	ldrb	r2, [r1, r2]
 800047a:	701a      	strb	r2, [r3, #0]
		   lcdn1202_senddat(fchar); //Send pattern 1 byte at a time
 800047c:	183b      	adds	r3, r7, r0
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	0018      	movs	r0, r3
 8000482:	f7ff ff05 	bl	8000290 <lcdn1202_senddat>
            for(ci=0;ci<8;ci++)
 8000486:	193b      	adds	r3, r7, r4
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	193b      	adds	r3, r7, r4
 800048c:	3201      	adds	r2, #1
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	2317      	movs	r3, #23
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b07      	cmp	r3, #7
 8000498:	d9e3      	bls.n	8000462 <LCD_drawchar+0xba>
		}
	  }
	else{}
}
 800049a:	e7ff      	b.n	800049c <LCD_drawchar+0xf4>
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b007      	add	sp, #28
 80004a2:	bd90      	pop	{r4, r7, pc}
 80004a4:	08001de4 	.word	0x08001de4

080004a8 <LCD_drawtext>:

void LCD_drawtext(char *text, unsigned char txtrow, unsigned char txtcol)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	0008      	movs	r0, r1
 80004b2:	0011      	movs	r1, r2
 80004b4:	1cfb      	adds	r3, r7, #3
 80004b6:	1c02      	adds	r2, r0, #0
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	1cbb      	adds	r3, r7, #2
 80004bc:	1c0a      	adds	r2, r1, #0
 80004be:	701a      	strb	r2, [r3, #0]
	unsigned int stridx = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]

	while(text[stridx] != 0) //Scan characters in string
 80004c4:	e013      	b.n	80004ee <LCD_drawtext+0x46>
	  {
		LCD_drawchar(text[stridx],txtrow,txtcol+(8*stridx)); //Display each character
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	7818      	ldrb	r0, [r3, #0]
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	1cbb      	adds	r3, r7, #2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	18d3      	adds	r3, r2, r3
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	1cfb      	adds	r3, r7, #3
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	0019      	movs	r1, r3
 80004e4:	f7ff ff60 	bl	80003a8 <LCD_drawchar>
		stridx++;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3301      	adds	r3, #1
 80004ec:	60fb      	str	r3, [r7, #12]
	while(text[stridx] != 0) //Scan characters in string
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	18d3      	adds	r3, r2, r3
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1e5      	bne.n	80004c6 <LCD_drawtext+0x1e>
	  }
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b004      	add	sp, #16
 8000502:	bd80      	pop	{r7, pc}

08000504 <LCD_drawint>:

void LCD_drawint(unsigned int num, unsigned char numrow, unsigned char numcol)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	0008      	movs	r0, r1
 800050e:	0011      	movs	r1, r2
 8000510:	1cfb      	adds	r3, r7, #3
 8000512:	1c02      	adds	r2, r0, #0
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	1cbb      	adds	r3, r7, #2
 8000518:	1c0a      	adds	r2, r1, #0
 800051a:	701a      	strb	r2, [r3, #0]
	char ibuff[11]; //MAX : 10 DIGIT -> 4294967295

	unsigned char ndigit=0,nd;
 800051c:	231f      	movs	r3, #31
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
	unsigned int numb; //Must be unsigned, so max. number can be 4294967295
			   //If set to signed, max. number only 2147483647

	numb = num;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	61bb      	str	r3, [r7, #24]
	while(numb!=0) //Counting digit
 8000528:	e00c      	b.n	8000544 <LCD_drawint+0x40>
	  {
	  	ndigit++;
 800052a:	211f      	movs	r1, #31
 800052c:	187b      	adds	r3, r7, r1
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	187b      	adds	r3, r7, r1
 8000532:	3201      	adds	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
		numb /= 10; 
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	210a      	movs	r1, #10
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff fde4 	bl	8000108 <__udivsi3>
 8000540:	0003      	movs	r3, r0
 8000542:	61bb      	str	r3, [r7, #24]
	while(numb!=0) //Counting digit
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1ef      	bne.n	800052a <LCD_drawint+0x26>
	  }
	for(nd=0;nd<ndigit;nd++) //Converting each digit
 800054a:	231e      	movs	r3, #30
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e021      	b.n	8000598 <LCD_drawint+0x94>
	  {
		numb = num%10;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	210a      	movs	r1, #10
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff fe5b 	bl	8000214 <__aeabi_uidivmod>
 800055e:	000b      	movs	r3, r1
 8000560:	61bb      	str	r3, [r7, #24]
		num = num/10;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	210a      	movs	r1, #10
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff fdce 	bl	8000108 <__udivsi3>
 800056c:	0003      	movs	r3, r0
 800056e:	607b      	str	r3, [r7, #4]
		ibuff[ndigit-(nd+1)] = numb + '0'; //Start from last_index-1
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	b2da      	uxtb	r2, r3
 8000574:	231f      	movs	r3, #31
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	7819      	ldrb	r1, [r3, #0]
 800057a:	201e      	movs	r0, #30
 800057c:	183b      	adds	r3, r7, r0
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	1acb      	subs	r3, r1, r3
 8000584:	3230      	adds	r2, #48	; 0x30
 8000586:	b2d1      	uxtb	r1, r2
 8000588:	220c      	movs	r2, #12
 800058a:	18ba      	adds	r2, r7, r2
 800058c:	54d1      	strb	r1, [r2, r3]
	for(nd=0;nd<ndigit;nd++) //Converting each digit
 800058e:	183b      	adds	r3, r7, r0
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	183b      	adds	r3, r7, r0
 8000594:	3201      	adds	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	231e      	movs	r3, #30
 800059a:	18fa      	adds	r2, r7, r3
 800059c:	211f      	movs	r1, #31
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d3d5      	bcc.n	8000554 <LCD_drawint+0x50>
	  }
	ibuff[ndigit] = '\0'; //Last character is null
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	200c      	movs	r0, #12
 80005ae:	183a      	adds	r2, r7, r0
 80005b0:	2100      	movs	r1, #0
 80005b2:	54d1      	strb	r1, [r2, r3]

	LCD_drawtext(ibuff,numrow,numcol); //Display number as text
 80005b4:	1cbb      	adds	r3, r7, #2
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	1cfb      	adds	r3, r7, #3
 80005ba:	7819      	ldrb	r1, [r3, #0]
 80005bc:	183b      	adds	r3, r7, r0
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff72 	bl	80004a8 <LCD_drawtext>
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b008      	add	sp, #32
 80005ca:	bd80      	pop	{r7, pc}

080005cc <LCD_clear>:

void LCD_clear()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	lcdn1202_sendcom(0xAE);  //Set Display off
 80005d0:	20ae      	movs	r0, #174	; 0xae
 80005d2:	f7ff fe4d 	bl	8000270 <lcdn1202_sendcom>
	lcdn1202_clear(); //Clear display
 80005d6:	f7ff fe9a 	bl	800030e <lcdn1202_clear>
	lcdn1202_sendcom(0xAF); //Set Display on
 80005da:	20af      	movs	r0, #175	; 0xaf
 80005dc:	f7ff fe48 	bl	8000270 <lcdn1202_sendcom>
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <LCD_clearblock>:

void LCD_clearblock(unsigned char row, unsigned char col_start, unsigned char col_fin)
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	0004      	movs	r4, r0
 80005ee:	0008      	movs	r0, r1
 80005f0:	0011      	movs	r1, r2
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	1c22      	adds	r2, r4, #0
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	1c02      	adds	r2, r0, #0
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	1d7b      	adds	r3, r7, #5
 8000600:	1c0a      	adds	r2, r1, #0
 8000602:	701a      	strb	r2, [r3, #0]
	unsigned char col;

	lcdn1202_setpos(row,col_start); //Set start position
 8000604:	1dbb      	adds	r3, r7, #6
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff fe4e 	bl	80002b0 <lcdn1202_setpos>
	for(col=col_start;col<=col_fin;col++) //Scan columns
 8000614:	230f      	movs	r3, #15
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	1dba      	adds	r2, r7, #6
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e008      	b.n	8000632 <LCD_clearblock+0x4c>
	   {
		lcdn1202_senddat(0);	//Send 0 to every pixel in a column
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fe35 	bl	8000290 <lcdn1202_senddat>
	for(col=col_start;col<=col_fin;col++) //Scan columns
 8000626:	210f      	movs	r1, #15
 8000628:	187b      	adds	r3, r7, r1
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	187b      	adds	r3, r7, r1
 800062e:	3201      	adds	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	230f      	movs	r3, #15
 8000634:	18fa      	adds	r2, r7, r3
 8000636:	1d7b      	adds	r3, r7, #5
 8000638:	7812      	ldrb	r2, [r2, #0]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d9ef      	bls.n	8000620 <LCD_clearblock+0x3a>
	   }
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b005      	add	sp, #20
 8000648:	bd90      	pop	{r4, r7, pc}

0800064a <LCD_normal>:

void LCD_normal()
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
	lcdn1202_sendcom(0xA6);	//Black Pixel in White Background
 800064e:	20a6      	movs	r0, #166	; 0xa6
 8000650:	f7ff fe0e 	bl	8000270 <lcdn1202_sendcom>
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <LCD_reverse>:

void LCD_reverse()
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
	lcdn1202_sendcom(0xA7);	//White Pixel in Black Background
 800065e:	20a7      	movs	r0, #167	; 0xa7
 8000660:	f7ff fe06 	bl	8000270 <lcdn1202_sendcom>
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <LCD_BL_ON>:

void LCD_BL_ON()
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
	lcdn1202_blon(); //Backlight on
 800066e:	f000 f8b4 	bl	80007da <lcdn1202_blon>
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <LCD_BL_OFF>:

void LCD_BL_OFF()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	lcdn1202_bloff(); //Backlight off
 800067c:	f000 f8b9 	bl	80007f2 <lcdn1202_bloff>
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <lcdn1202_gpio_init>:

#include "main.h"
#include "lcd_n1202_stm32f.h"

void lcdn1202_gpio_init()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	0018      	movs	r0, r3
 8000692:	2314      	movs	r3, #20
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f001 fb40 	bl	8001d1c <memset>

	// GPIO Ports Clock Enable
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <lcdn1202_gpio_init+0x70>)
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <lcdn1202_gpio_init+0x70>)
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0289      	lsls	r1, r1, #10
 80006a6:	430a      	orrs	r2, r1
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <lcdn1202_gpio_init+0x70>)
 80006ac:	695a      	ldr	r2, [r3, #20]
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	029b      	lsls	r3, r3, #10
 80006b2:	4013      	ands	r3, r2
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

	// Configure GPIO pin Output Level
	HAL_GPIO_WritePin(LCDP, LCDBL|LCDDAT|LCDCLK, GPIO_PIN_RESET);
 80006b8:	23e0      	movs	r3, #224	; 0xe0
 80006ba:	0099      	lsls	r1, r3, #2
 80006bc:	2390      	movs	r3, #144	; 0x90
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2200      	movs	r2, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fe9c 	bl	8001400 <HAL_GPIO_WritePin>

	// Configure GPIO pins
	GPIO_InitStruct.Pin = LCDBL|LCDDAT|LCDCLK;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	22e0      	movs	r2, #224	; 0xe0
 80006cc:	0092      	lsls	r2, r2, #2
 80006ce:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2201      	movs	r2, #1
 80006d4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCDP, &GPIO_InitStruct);
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	2390      	movs	r3, #144	; 0x90
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fd18 	bl	8001120 <HAL_GPIO_Init>
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b006      	add	sp, #24
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <lcdn1202_9bsend>:

void lcdn1202_9bsend(unsigned char cdsign, unsigned char comdat)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	0002      	movs	r2, r0
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	1c0a      	adds	r2, r1, #0
 800070c:	701a      	strb	r2, [r3, #0]
	unsigned char cdi;

	if(cdsign==0) HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_RESET); //1st bit is 0 for Command
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d108      	bne.n	8000728 <lcdn1202_9bsend+0x2c>
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	0059      	lsls	r1, r3, #1
 800071a:	2390      	movs	r3, #144	; 0x90
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	2200      	movs	r2, #0
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fe6d 	bl	8001400 <HAL_GPIO_WritePin>
 8000726:	e007      	b.n	8000738 <lcdn1202_9bsend+0x3c>
	else HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_SET); //1st bit is 1 for Data
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	0059      	lsls	r1, r3, #1
 800072c:	2390      	movs	r3, #144	; 0x90
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2201      	movs	r2, #1
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fe64 	bl	8001400 <HAL_GPIO_WritePin>
	lcdn1202_clock1();
 8000738:	f000 f839 	bl	80007ae <lcdn1202_clock1>

	for(cdi=0;cdi<8;cdi++) //Send 2nd-9th bit
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e022      	b.n	800078c <lcdn1202_9bsend+0x90>
	   {
		if(comdat & 0x80) HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_SET); //LCDDAT = '1'
 8000746:	1dbb      	adds	r3, r7, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b25b      	sxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	da08      	bge.n	8000762 <lcdn1202_9bsend+0x66>
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	0059      	lsls	r1, r3, #1
 8000754:	2390      	movs	r3, #144	; 0x90
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2201      	movs	r2, #1
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fe50 	bl	8001400 <HAL_GPIO_WritePin>
 8000760:	e007      	b.n	8000772 <lcdn1202_9bsend+0x76>
		else HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_RESET); //LCDDAT = '0'
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	0059      	lsls	r1, r3, #1
 8000766:	2390      	movs	r3, #144	; 0x90
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2200      	movs	r2, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fe47 	bl	8001400 <HAL_GPIO_WritePin>
		lcdn1202_clock1();
 8000772:	f000 f81c 	bl	80007ae <lcdn1202_clock1>
		comdat <<= 1; //Shift to next bit
 8000776:	1dba      	adds	r2, r7, #6
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	18db      	adds	r3, r3, r3
 800077e:	7013      	strb	r3, [r2, #0]
	for(cdi=0;cdi<8;cdi++) //Send 2nd-9th bit
 8000780:	210f      	movs	r1, #15
 8000782:	187b      	adds	r3, r7, r1
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	187b      	adds	r3, r7, r1
 8000788:	3201      	adds	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b07      	cmp	r3, #7
 8000794:	d9d7      	bls.n	8000746 <lcdn1202_9bsend+0x4a>
	   }
	HAL_GPIO_WritePin(LCDP, LCDDAT, GPIO_PIN_RESET); //Reset pin state
 8000796:	2380      	movs	r3, #128	; 0x80
 8000798:	0059      	lsls	r1, r3, #1
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2200      	movs	r2, #0
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fe2d 	bl	8001400 <HAL_GPIO_WritePin>
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b004      	add	sp, #16
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdn1202_clock1>:

void lcdn1202_clock1()
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDP, LCDCLK, GPIO_PIN_SET);	//Send 1 pulse to LCDCLK 
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	0099      	lsls	r1, r3, #2
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2201      	movs	r2, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fe1f 	bl	8001400 <HAL_GPIO_WritePin>
	__asm__("nop"); //Short delay
 80007c2:	46c0      	nop			; (mov r8, r8)
	HAL_GPIO_WritePin(LCDP, LCDCLK, GPIO_PIN_RESET);
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	0099      	lsls	r1, r3, #2
 80007c8:	2390      	movs	r3, #144	; 0x90
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	2200      	movs	r2, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fe16 	bl	8001400 <HAL_GPIO_WritePin>
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <lcdn1202_blon>:

void lcdn1202_blon()
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDP, LCDBL, GPIO_PIN_SET);	//LCDBL = '1'
 80007de:	2390      	movs	r3, #144	; 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2201      	movs	r2, #1
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fe0a 	bl	8001400 <HAL_GPIO_WritePin>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <lcdn1202_bloff>:

void lcdn1202_bloff()
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDP, LCDBL, GPIO_PIN_RESET);	//LCDBL = '0'
 80007f6:	2390      	movs	r3, #144	; 0x90
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2200      	movs	r2, #0
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fdfe 	bl	8001400 <HAL_GPIO_WritePin>
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 fb4b 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f873 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  lcdn1202_init();
 8000816:	f7ff fd03 	bl	8000220 <lcdn1202_init>
  /* USER CODE BEGIN 2 */
  drawLoadingBar();
 800081a:	f000 faad 	bl	8000d78 <drawLoadingBar>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  	drawBytes();
 800081e:	f000 fa55 	bl	8000ccc <drawBytes>
	  		HAL_Delay(1000);
 8000822:	23fa      	movs	r3, #250	; 0xfa
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fba2 	bl	8000f70 <HAL_Delay>
	        LCD_clearblock(3,5,84); //Finish column = 5 + 8*10 - 1
 800082c:	2254      	movs	r2, #84	; 0x54
 800082e:	2105      	movs	r1, #5
 8000830:	2003      	movs	r0, #3
 8000832:	f7ff fed8 	bl	80005e6 <LCD_clearblock>
	     	HAL_Delay(500);
 8000836:	23fa      	movs	r3, #250	; 0xfa
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fb98 	bl	8000f70 <HAL_Delay>
	  		LCD_clearblock(5,3,86); //Finish column = 3 + 6*14 - 1
 8000840:	2256      	movs	r2, #86	; 0x56
 8000842:	2103      	movs	r1, #3
 8000844:	2005      	movs	r0, #5
 8000846:	f7ff fece 	bl	80005e6 <LCD_clearblock>
	     	HAL_Delay(500);
 800084a:	23fa      	movs	r3, #250	; 0xfa
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fb8e 	bl	8000f70 <HAL_Delay>

	  		drawInt();
 8000854:	f000 f892 	bl	800097c <drawInt>
	  		HAL_Delay(1000);
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fb87 	bl	8000f70 <HAL_Delay>
	  		LCD_clear();
 8000862:	f7ff feb3 	bl	80005cc <LCD_clear>

	  		drawAlphanum();
 8000866:	f000 f8c3 	bl	80009f0 <drawAlphanum>
	  		HAL_Delay(1000);
 800086a:	23fa      	movs	r3, #250	; 0xfa
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fb7e 	bl	8000f70 <HAL_Delay>
	  		LCD_reverse();
 8000874:	f7ff fef1 	bl	800065a <LCD_reverse>
	  		HAL_Delay(1000);
 8000878:	23fa      	movs	r3, #250	; 0xfa
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fb77 	bl	8000f70 <HAL_Delay>
	  		LCD_clear();
 8000882:	f7ff fea3 	bl	80005cc <LCD_clear>
	  		LCD_normal();
 8000886:	f7ff fee0 	bl	800064a <LCD_normal>
	  		drawPunct();
 800088a:	f000 f8ef 	bl	8000a6c <drawPunct>
	  		HAL_Delay(1000);
 800088e:	23fa      	movs	r3, #250	; 0xfa
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fb6c 	bl	8000f70 <HAL_Delay>
	  		LCD_reverse();
 8000898:	f7ff fedf 	bl	800065a <LCD_reverse>
	  		HAL_Delay(1000);
 800089c:	23fa      	movs	r3, #250	; 0xfa
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fb65 	bl	8000f70 <HAL_Delay>
	  		LCD_clear();
 80008a6:	f7ff fe91 	bl	80005cc <LCD_clear>
	  		LCD_normal();
 80008aa:	f7ff fece 	bl	800064a <LCD_normal>

	  		drawFrame();
 80008ae:	f000 f8fb 	bl	8000aa8 <drawFrame>
	  		HAL_Delay(700);
 80008b2:	23af      	movs	r3, #175	; 0xaf
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fb5a 	bl	8000f70 <HAL_Delay>
	  		LCD_clearblock(3,36,43); //Finish column = 36 + 8 - 1
 80008bc:	222b      	movs	r2, #43	; 0x2b
 80008be:	2124      	movs	r1, #36	; 0x24
 80008c0:	2003      	movs	r0, #3
 80008c2:	f7ff fe90 	bl	80005e6 <LCD_clearblock>
	  		HAL_Delay(700);
 80008c6:	23af      	movs	r3, #175	; 0xaf
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fb50 	bl	8000f70 <HAL_Delay>
	  		LCD_clear();
 80008d0:	f7ff fe7c 	bl	80005cc <LCD_clear>
	  		drawArrow();
 80008d4:	f000 f9a5 	bl	8000c22 <drawArrow>
	  		HAL_Delay(700);
 80008d8:	23af      	movs	r3, #175	; 0xaf
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fb47 	bl	8000f70 <HAL_Delay>
	  		LCD_clearblock(3,36,43); //Finish column = 36 + 8 - 1
 80008e2:	222b      	movs	r2, #43	; 0x2b
 80008e4:	2124      	movs	r1, #36	; 0x24
 80008e6:	2003      	movs	r0, #3
 80008e8:	f7ff fe7d 	bl	80005e6 <LCD_clearblock>
	  		HAL_Delay(700);
 80008ec:	23af      	movs	r3, #175	; 0xaf
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fb3d 	bl	8000f70 <HAL_Delay>
	  		LCD_clear();
 80008f6:	f7ff fe69 	bl	80005cc <LCD_clear>
	  	  	drawBytes();
 80008fa:	e790      	b.n	800081e <main+0x14>

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b091      	sub	sp, #68	; 0x44
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	2410      	movs	r4, #16
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2330      	movs	r3, #48	; 0x30
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f001 fa05 	bl	8001d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000912:	003b      	movs	r3, r7
 8000914:	0018      	movs	r0, r3
 8000916:	2310      	movs	r3, #16
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f001 f9fe 	bl	8001d1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	0021      	movs	r1, r4
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2202      	movs	r2, #2
 8000926:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2201      	movs	r2, #1
 800092c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2210      	movs	r2, #16
 8000932:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	187b      	adds	r3, r7, r1
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fd7d 	bl	800143c <HAL_RCC_OscConfig>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000946:	f000 fa3f 	bl	8000dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	003b      	movs	r3, r7
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000950:	003b      	movs	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	003b      	movs	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	003b      	movs	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000962:	003b      	movs	r3, r7
 8000964:	2100      	movs	r1, #0
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f882 	bl	8001a70 <HAL_RCC_ClockConfig>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000970:	f000 fa2a 	bl	8000dc8 <Error_Handler>
  }
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b011      	add	sp, #68	; 0x44
 800097a:	bd90      	pop	{r4, r7, pc}

0800097c <drawInt>:

/* USER CODE BEGIN 4 */
void drawInt()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	LCD_drawint(64, 0, 8);
 8000980:	2208      	movs	r2, #8
 8000982:	2100      	movs	r1, #0
 8000984:	2040      	movs	r0, #64	; 0x40
 8000986:	f7ff fdbd 	bl	8000504 <LCD_drawint>
	LCD_drawint(-64, 2, 8);	//Negative number is not supported
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	425b      	negs	r3, r3
 800098e:	2208      	movs	r2, #8
 8000990:	2102      	movs	r1, #2
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fdb6 	bl	8000504 <LCD_drawint>
	 	 	 	 	 	 	//Its 2's complement will be displayed

	LCD_drawint(100, 3, 8);
 8000998:	2208      	movs	r2, #8
 800099a:	2103      	movs	r1, #3
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	f7ff fdb1 	bl	8000504 <LCD_drawint>
	LCD_drawchar(SYM_DEGREE, 3, 32);
 80009a2:	2220      	movs	r2, #32
 80009a4:	2103      	movs	r1, #3
 80009a6:	207f      	movs	r0, #127	; 0x7f
 80009a8:	f7ff fcfe 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar('C', 3, 40);
 80009ac:	2228      	movs	r2, #40	; 0x28
 80009ae:	2103      	movs	r1, #3
 80009b0:	2043      	movs	r0, #67	; 0x43
 80009b2:	f7ff fcf9 	bl	80003a8 <LCD_drawchar>

	LCD_drawint(65535, 5, 8);
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <drawInt+0x70>)
 80009b8:	2208      	movs	r2, #8
 80009ba:	2105      	movs	r1, #5
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fda1 	bl	8000504 <LCD_drawint>
	LCD_drawint(4294967295, 7, 8); //Max. is 4294967295
 80009c2:	2301      	movs	r3, #1
 80009c4:	425b      	negs	r3, r3
 80009c6:	2208      	movs	r2, #8
 80009c8:	2107      	movs	r1, #7
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fd9a 	bl	8000504 <LCD_drawint>

	LCD_drawint(064, 3, 70);  //Octal displayed as Decimal
 80009d0:	2246      	movs	r2, #70	; 0x46
 80009d2:	2103      	movs	r1, #3
 80009d4:	2034      	movs	r0, #52	; 0x34
 80009d6:	f7ff fd95 	bl	8000504 <LCD_drawint>
	LCD_drawint(0x64, 5, 70); //Hexadecimal displayed as Decimal
 80009da:	2246      	movs	r2, #70	; 0x46
 80009dc:	2105      	movs	r1, #5
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f7ff fd90 	bl	8000504 <LCD_drawint>
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	0000ffff 	.word	0x0000ffff

080009f0 <drawAlphanum>:

void drawAlphanum()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	LCD_drawtext("ABCDEFGHIJKL",0,0);
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <drawAlphanum+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fd54 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext("MNOPQRSTUVWX",1,0);
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <drawAlphanum+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	2101      	movs	r1, #1
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fd4e 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext("YZ",2,0);
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <drawAlphanum+0x68>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2102      	movs	r1, #2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fd48 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext("abcdefghijkl",3,0);
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <drawAlphanum+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fd42 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext("mnopqrstuvwxyz",4,0);
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <drawAlphanum+0x70>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	2104      	movs	r1, #4
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fd3c 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext("yz",5,0);
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <drawAlphanum+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fd36 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext("0123456789",6,0);
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <drawAlphanum+0x78>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2106      	movs	r1, #6
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fd30 	bl	80004a8 <LCD_drawtext>
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	08001d44 	.word	0x08001d44
 8000a54:	08001d54 	.word	0x08001d54
 8000a58:	08001d64 	.word	0x08001d64
 8000a5c:	08001d68 	.word	0x08001d68
 8000a60:	08001d78 	.word	0x08001d78
 8000a64:	08001d88 	.word	0x08001d88
 8000a68:	08001d8c 	.word	0x08001d8c

08000a6c <drawPunct>:

void drawPunct()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	LCD_drawtext("<{([+_-=])}>",0,0);
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <drawPunct+0x30>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fd16 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext("!@#$%^&*`|~?",2,0);
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <drawPunct+0x34>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fd10 	bl	80004a8 <LCD_drawtext>
	LCD_drawtext(".,\"\'\\/ :;",4,0);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <drawPunct+0x38>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fd0a 	bl	80004a8 <LCD_drawtext>
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	08001d98 	.word	0x08001d98
 8000aa0:	08001da8 	.word	0x08001da8
 8000aa4:	08001db8 	.word	0x08001db8

08000aa8 <drawFrame>:

void drawFrame()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	unsigned char startcol=20;
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	701a      	strb	r2, [r3, #0]

	LCD_drawchar(FRAME_TOP_LEFT,1,startcol);
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2101      	movs	r1, #1
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	f7ff fc73 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_HOR,1,startcol+8);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3308      	adds	r3, #8
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	001a      	movs	r2, r3
 8000acc:	2101      	movs	r1, #1
 8000ace:	2089      	movs	r0, #137	; 0x89
 8000ad0:	f7ff fc6a 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_TOP,1,startcol+16);
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3310      	adds	r3, #16
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	001a      	movs	r2, r3
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2081      	movs	r0, #129	; 0x81
 8000ae2:	f7ff fc61 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_HOR,1,startcol+24);
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	3318      	adds	r3, #24
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	001a      	movs	r2, r3
 8000af0:	2101      	movs	r1, #1
 8000af2:	2089      	movs	r0, #137	; 0x89
 8000af4:	f7ff fc58 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_TOP_RIGHT,1,startcol+32);
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	3320      	adds	r3, #32
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	001a      	movs	r2, r3
 8000b02:	2101      	movs	r1, #1
 8000b04:	2082      	movs	r0, #130	; 0x82
 8000b06:	f7ff fc4f 	bl	80003a8 <LCD_drawchar>

	LCD_drawchar(FRAME_LINE_VER,2,startcol);
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2102      	movs	r1, #2
 8000b12:	208a      	movs	r0, #138	; 0x8a
 8000b14:	f7ff fc48 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_VER,2,startcol+16);
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	3310      	adds	r3, #16
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	001a      	movs	r2, r3
 8000b22:	2102      	movs	r1, #2
 8000b24:	208a      	movs	r0, #138	; 0x8a
 8000b26:	f7ff fc3f 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_VER,2,startcol+32);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	3320      	adds	r3, #32
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	001a      	movs	r2, r3
 8000b34:	2102      	movs	r1, #2
 8000b36:	208a      	movs	r0, #138	; 0x8a
 8000b38:	f7ff fc36 	bl	80003a8 <LCD_drawchar>

	LCD_drawchar(FRAME_MID_LEFT,3,startcol);
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	2103      	movs	r1, #3
 8000b44:	2083      	movs	r0, #131	; 0x83
 8000b46:	f7ff fc2f 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_HOR,3,startcol+8);
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	3308      	adds	r3, #8
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	001a      	movs	r2, r3
 8000b54:	2103      	movs	r1, #3
 8000b56:	2089      	movs	r0, #137	; 0x89
 8000b58:	f7ff fc26 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_CENTER,3,startcol+16);
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3310      	adds	r3, #16
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	001a      	movs	r2, r3
 8000b66:	2103      	movs	r1, #3
 8000b68:	2084      	movs	r0, #132	; 0x84
 8000b6a:	f7ff fc1d 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_HOR,3,startcol+24);
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3318      	adds	r3, #24
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	001a      	movs	r2, r3
 8000b78:	2103      	movs	r1, #3
 8000b7a:	2089      	movs	r0, #137	; 0x89
 8000b7c:	f7ff fc14 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_MID_RIGHT,3,startcol+32);
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	3320      	adds	r3, #32
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	2085      	movs	r0, #133	; 0x85
 8000b8e:	f7ff fc0b 	bl	80003a8 <LCD_drawchar>

	LCD_drawchar(FRAME_LINE_VER,4,startcol);
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001a      	movs	r2, r3
 8000b98:	2104      	movs	r1, #4
 8000b9a:	208a      	movs	r0, #138	; 0x8a
 8000b9c:	f7ff fc04 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_VER,4,startcol+16);
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3310      	adds	r3, #16
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2104      	movs	r1, #4
 8000bac:	208a      	movs	r0, #138	; 0x8a
 8000bae:	f7ff fbfb 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_VER,4,startcol+32);
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3320      	adds	r3, #32
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	001a      	movs	r2, r3
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	208a      	movs	r0, #138	; 0x8a
 8000bc0:	f7ff fbf2 	bl	80003a8 <LCD_drawchar>

	LCD_drawchar(FRAME_BOT_LEFT,5,startcol);
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2105      	movs	r1, #5
 8000bcc:	2086      	movs	r0, #134	; 0x86
 8000bce:	f7ff fbeb 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_HOR,5,startcol+8);
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3308      	adds	r3, #8
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2105      	movs	r1, #5
 8000bde:	2089      	movs	r0, #137	; 0x89
 8000be0:	f7ff fbe2 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_BOT,5,startcol+16);
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3310      	adds	r3, #16
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	001a      	movs	r2, r3
 8000bee:	2105      	movs	r1, #5
 8000bf0:	2087      	movs	r0, #135	; 0x87
 8000bf2:	f7ff fbd9 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_LINE_HOR,5,startcol+24);
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	001a      	movs	r2, r3
 8000c00:	2105      	movs	r1, #5
 8000c02:	2089      	movs	r0, #137	; 0x89
 8000c04:	f7ff fbd0 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(FRAME_BOT_RIGHT,5,startcol+32);
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3320      	adds	r3, #32
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	001a      	movs	r2, r3
 8000c12:	2105      	movs	r1, #5
 8000c14:	2088      	movs	r0, #136	; 0x88
 8000c16:	f7ff fbc7 	bl	80003a8 <LCD_drawchar>
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <drawArrow>:
void drawArrow()
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
	unsigned char startcol=20;
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	2214      	movs	r2, #20
 8000c2c:	701a      	strb	r2, [r3, #0]

	LCD_drawchar(ARROW_UP_LEFT,1,startcol);
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	001a      	movs	r2, r3
 8000c34:	2101      	movs	r1, #1
 8000c36:	208f      	movs	r0, #143	; 0x8f
 8000c38:	f7ff fbb6 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(ARROW_UP,1,startcol+16);
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3310      	adds	r3, #16
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	001a      	movs	r2, r3
 8000c46:	2101      	movs	r1, #1
 8000c48:	208b      	movs	r0, #139	; 0x8b
 8000c4a:	f7ff fbad 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(ARROW_UP_RIGHT,1,startcol+32);
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3320      	adds	r3, #32
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	001a      	movs	r2, r3
 8000c58:	2101      	movs	r1, #1
 8000c5a:	2090      	movs	r0, #144	; 0x90
 8000c5c:	f7ff fba4 	bl	80003a8 <LCD_drawchar>

	LCD_drawchar(ARROW_LEFT,3,startcol);
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	001a      	movs	r2, r3
 8000c66:	2103      	movs	r1, #3
 8000c68:	208d      	movs	r0, #141	; 0x8d
 8000c6a:	f7ff fb9d 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(ARROW_POINT,3,startcol+16);
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3310      	adds	r3, #16
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	001a      	movs	r2, r3
 8000c78:	2103      	movs	r1, #3
 8000c7a:	2093      	movs	r0, #147	; 0x93
 8000c7c:	f7ff fb94 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(ARROW_RIGHT,3,startcol+32);
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3320      	adds	r3, #32
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	208e      	movs	r0, #142	; 0x8e
 8000c8e:	f7ff fb8b 	bl	80003a8 <LCD_drawchar>

	LCD_drawchar(ARROW_DOWN_LEFT,5,startcol);
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001a      	movs	r2, r3
 8000c98:	2105      	movs	r1, #5
 8000c9a:	2091      	movs	r0, #145	; 0x91
 8000c9c:	f7ff fb84 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(ARROW_DOWN,5,startcol+16);
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2105      	movs	r1, #5
 8000cac:	208c      	movs	r0, #140	; 0x8c
 8000cae:	f7ff fb7b 	bl	80003a8 <LCD_drawchar>
	LCD_drawchar(ARROW_DOWN_RIGHT,5,startcol+32);
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3320      	adds	r3, #32
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	001a      	movs	r2, r3
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2092      	movs	r0, #146	; 0x92
 8000cc0:	f7ff fb72 	bl	80003a8 <LCD_drawchar>
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <drawBytes>:

void drawBytes()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	unsigned char Ts,ds;

	LCD_setpos(3,5);
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f7ff fb43 	bl	8000360 <LCD_setpos>
	for(Ts=0;Ts<8;Ts++) //Draw pattern 8 times
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e018      	b.n	8000d14 <drawBytes+0x48>
	{
		for(ds=0;ds<10;ds++)
 8000ce2:	1dbb      	adds	r3, r7, #6
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	e00b      	b.n	8000d02 <drawBytes+0x36>
		{
			LCD_drawbyte(dsine[ds]);
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4a20      	ldr	r2, [pc, #128]	; (8000d70 <drawBytes+0xa4>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fb49 	bl	800038a <LCD_drawbyte>
		for(ds=0;ds<10;ds++)
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	1dbb      	adds	r3, r7, #6
 8000cfe:	3201      	adds	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	1dbb      	adds	r3, r7, #6
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b09      	cmp	r3, #9
 8000d08:	d9ef      	bls.n	8000cea <drawBytes+0x1e>
	for(Ts=0;Ts<8;Ts++) //Draw pattern 8 times
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	3201      	adds	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	d9e2      	bls.n	8000ce2 <drawBytes+0x16>
		}
	}

	LCD_setpos(5,3);
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f7ff fb1e 	bl	8000360 <LCD_setpos>
	for(Ts=0;Ts<6;Ts++) //Draw pattern 6 times
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e018      	b.n	8000d5e <drawBytes+0x92>
	{
		for(ds=0;ds<14;ds++)
 8000d2c:	1dbb      	adds	r3, r7, #6
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e00b      	b.n	8000d4c <drawBytes+0x80>
		{
			LCD_drawbyte(dtri[ds]);
 8000d34:	1dbb      	adds	r3, r7, #6
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <drawBytes+0xa8>)
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fb24 	bl	800038a <LCD_drawbyte>
		for(ds=0;ds<14;ds++)
 8000d42:	1dbb      	adds	r3, r7, #6
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	1dbb      	adds	r3, r7, #6
 8000d48:	3201      	adds	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	1dbb      	adds	r3, r7, #6
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b0d      	cmp	r3, #13
 8000d52:	d9ef      	bls.n	8000d34 <drawBytes+0x68>
	for(Ts=0;Ts<6;Ts++) //Draw pattern 6 times
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	3201      	adds	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d9e2      	bls.n	8000d2c <drawBytes+0x60>
		}
	}
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000000 	.word	0x20000000
 8000d74:	2000000c 	.word	0x2000000c

08000d78 <drawLoadingBar>:

void drawLoadingBar()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	unsigned char lb;

	LCD_setpos(4,5);
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2004      	movs	r0, #4
 8000d82:	f7ff faed 	bl	8000360 <LCD_setpos>

	for(lb=5;lb<91;lb++)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	2205      	movs	r2, #5
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	e00a      	b.n	8000da4 <drawLoadingBar+0x2c>
	{
		LCD_drawbyte(0xFF);
 8000d8e:	20ff      	movs	r0, #255	; 0xff
 8000d90:	f7ff fafb 	bl	800038a <LCD_drawbyte>
		HAL_Delay(10);
 8000d94:	200a      	movs	r0, #10
 8000d96:	f000 f8eb 	bl	8000f70 <HAL_Delay>
	for(lb=5;lb<91;lb++)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	3201      	adds	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b5a      	cmp	r3, #90	; 0x5a
 8000daa:	d9f0      	bls.n	8000d8e <drawLoadingBar+0x16>
	}
	HAL_Delay(1000);
 8000dac:	23fa      	movs	r3, #250	; 0xfa
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 f8dd 	bl	8000f70 <HAL_Delay>
	LCD_clearblock(4,5,90); //Start & finish column = start & finish lb
 8000db6:	225a      	movs	r2, #90	; 0x5a
 8000db8:	2105      	movs	r1, #5
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f7ff fc13 	bl	80005e6 <LCD_clearblock>
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	699a      	ldr	r2, [r3, #24]
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_MspInit+0x44>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	619a      	str	r2, [r3, #24]
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x44>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2201      	movs	r2, #1
 8000dec:	4013      	ands	r3, r2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x44>)
 8000df4:	69da      	ldr	r2, [r3, #28]
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_MspInit+0x44>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	0549      	lsls	r1, r1, #21
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	61da      	str	r2, [r3, #28]
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_MspInit+0x44>)
 8000e02:	69da      	ldr	r2, [r3, #28]
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	055b      	lsls	r3, r3, #21
 8000e08:	4013      	ands	r3, r2
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f87a 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490e      	ldr	r1, [pc, #56]	; (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0b      	ldr	r4, [pc, #44]	; (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e7e:	f7ff ffe4 	bl	8000e4a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e82:	f000 ff27 	bl	8001cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e86:	f7ff fcc0 	bl	800080a <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   r0, =_estack
 8000e8c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000e98:	0800207c 	.word	0x0800207c
  ldr r2, =_sbss
 8000e9c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000ea0:	20000048 	.word	0x20000048

08000ea4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_Init+0x24>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_Init+0x24>)
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f809 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebe:	f7ff ff89 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_InitTick+0x5c>)
 8000eda:	681c      	ldr	r4, [r3, #0]
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_InitTick+0x60>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	23fa      	movs	r3, #250	; 0xfa
 8000ee4:	0098      	lsls	r0, r3, #2
 8000ee6:	f7ff f90f 	bl	8000108 <__udivsi3>
 8000eea:	0003      	movs	r3, r0
 8000eec:	0019      	movs	r1, r3
 8000eee:	0020      	movs	r0, r4
 8000ef0:	f7ff f90a 	bl	8000108 <__udivsi3>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f905 	bl	8001106 <HAL_SYSTICK_Config>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e00f      	b.n	8000f24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d80b      	bhi.n	8000f22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	425b      	negs	r3, r3
 8000f10:	2200      	movs	r2, #0
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 f8e2 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_InitTick+0x64>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b003      	add	sp, #12
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	2000001c 	.word	0x2000001c
 8000f30:	20000024 	.word	0x20000024
 8000f34:	20000020 	.word	0x20000020

08000f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_IncTick+0x1c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	001a      	movs	r2, r3
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x20>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	18d2      	adds	r2, r2, r3
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_IncTick+0x20>)
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	20000024 	.word	0x20000024
 8000f58:	20000044 	.word	0x20000044

08000f5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <HAL_GetTick+0x10>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000044 	.word	0x20000044

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff fff0 	bl	8000f5c <HAL_GetTick>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3301      	adds	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	001a      	movs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	189b      	adds	r3, r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	f7ff ffe0 	bl	8000f5c <HAL_GetTick>
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	20000024 	.word	0x20000024

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b7f      	cmp	r3, #127	; 0x7f
 8000fcc:	d828      	bhi.n	8001020 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <__NVIC_SetPriority+0xd4>)
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	33c0      	adds	r3, #192	; 0xc0
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	589b      	ldr	r3, [r3, r2]
 8000fde:	1dfa      	adds	r2, r7, #7
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	00d2      	lsls	r2, r2, #3
 8000fea:	21ff      	movs	r1, #255	; 0xff
 8000fec:	4091      	lsls	r1, r2
 8000fee:	000a      	movs	r2, r1
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	22ff      	movs	r2, #255	; 0xff
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	0018      	movs	r0, r3
 8001004:	2303      	movs	r3, #3
 8001006:	4003      	ands	r3, r0
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800100c:	481f      	ldr	r0, [pc, #124]	; (800108c <__NVIC_SetPriority+0xd4>)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	430a      	orrs	r2, r1
 8001018:	33c0      	adds	r3, #192	; 0xc0
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800101e:	e031      	b.n	8001084 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <__NVIC_SetPriority+0xd8>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	0019      	movs	r1, r3
 8001028:	230f      	movs	r3, #15
 800102a:	400b      	ands	r3, r1
 800102c:	3b08      	subs	r3, #8
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3306      	adds	r3, #6
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	18d3      	adds	r3, r2, r3
 8001036:	3304      	adds	r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	1dfa      	adds	r2, r7, #7
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	0011      	movs	r1, r2
 8001040:	2203      	movs	r2, #3
 8001042:	400a      	ands	r2, r1
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	21ff      	movs	r1, #255	; 0xff
 8001048:	4091      	lsls	r1, r2
 800104a:	000a      	movs	r2, r1
 800104c:	43d2      	mvns	r2, r2
 800104e:	401a      	ands	r2, r3
 8001050:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	019b      	lsls	r3, r3, #6
 8001056:	22ff      	movs	r2, #255	; 0xff
 8001058:	401a      	ands	r2, r3
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	0018      	movs	r0, r3
 8001060:	2303      	movs	r3, #3
 8001062:	4003      	ands	r3, r0
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <__NVIC_SetPriority+0xd8>)
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	001c      	movs	r4, r3
 8001070:	230f      	movs	r3, #15
 8001072:	4023      	ands	r3, r4
 8001074:	3b08      	subs	r3, #8
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	430a      	orrs	r2, r1
 800107a:	3306      	adds	r3, #6
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	18c3      	adds	r3, r0, r3
 8001080:	3304      	adds	r3, #4
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b003      	add	sp, #12
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	045b      	lsls	r3, r3, #17
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d301      	bcc.n	80010ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a8:	2301      	movs	r3, #1
 80010aa:	e010      	b.n	80010ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <SysTick_Config+0x44>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	3a01      	subs	r2, #1
 80010b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b4:	2301      	movs	r3, #1
 80010b6:	425b      	negs	r3, r3
 80010b8:	2103      	movs	r1, #3
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff ff7c 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x44>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x44>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	210f      	movs	r1, #15
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ffbf 	bl	8001094 <SysTick_Config>
 8001116:	0003      	movs	r3, r0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e14f      	b.n	80013d0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x28>
 8001146:	e140      	b.n	80013ca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	43da      	mvns	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	43da      	mvns	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	2201      	movs	r2, #1
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	58d3      	ldr	r3, [r2, r3]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2207      	movs	r2, #7
 800121c:	4013      	ands	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2107      	movs	r1, #7
 8001236:	400b      	ands	r3, r1
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	401a      	ands	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	23c0      	movs	r3, #192	; 0xc0
 800128c:	029b      	lsls	r3, r3, #10
 800128e:	4013      	ands	r3, r2
 8001290:	d100      	bne.n	8001294 <HAL_GPIO_Init+0x174>
 8001292:	e09a      	b.n	80013ca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <HAL_GPIO_Init+0x2c8>)
 8001296:	699a      	ldr	r2, [r3, #24]
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_GPIO_Init+0x2c8>)
 800129a:	2101      	movs	r1, #1
 800129c:	430a      	orrs	r2, r1
 800129e:	619a      	str	r2, [r3, #24]
 80012a0:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_GPIO_Init+0x2c8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ac:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_GPIO_Init+0x2cc>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	589b      	ldr	r3, [r3, r2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	2390      	movs	r3, #144	; 0x90
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1e2>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1de>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a43      	ldr	r2, [pc, #268]	; (80013f4 <HAL_GPIO_Init+0x2d4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1da>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a42      	ldr	r2, [pc, #264]	; (80013f8 <HAL_GPIO_Init+0x2d8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1d6>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x1e4>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x1e4>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x1e4>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x1e4>
 8001302:	2300      	movs	r3, #0
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	2103      	movs	r1, #3
 8001308:	400a      	ands	r2, r1
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001314:	4935      	ldr	r1, [pc, #212]	; (80013ec <HAL_GPIO_Init+0x2cc>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	4013      	ands	r3, r2
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	035b      	lsls	r3, r3, #13
 800138e:	4013      	ands	r3, r2
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	039b      	lsls	r3, r3, #14
 80013b8:	4013      	ands	r3, r2
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	40da      	lsrs	r2, r3
 80013d8:	1e13      	subs	r3, r2, #0
 80013da:	d000      	beq.n	80013de <HAL_GPIO_Init+0x2be>
 80013dc:	e6a8      	b.n	8001130 <HAL_GPIO_Init+0x10>
  } 
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b006      	add	sp, #24
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	48000400 	.word	0x48000400
 80013f4:	48000800 	.word	0x48000800
 80013f8:	48000c00 	.word	0x48000c00
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	0008      	movs	r0, r1
 800140a:	0011      	movs	r1, r2
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	1c02      	adds	r2, r0, #0
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	1c7b      	adds	r3, r7, #1
 8001414:	1c0a      	adds	r2, r1, #0
 8001416:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001418:	1c7b      	adds	r3, r7, #1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001420:	1cbb      	adds	r3, r7, #2
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142a:	1cbb      	adds	r3, r7, #2
 800142c:	881a      	ldrh	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e301      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x1e>
 8001458:	e08d      	b.n	8001576 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800145a:	4bc3      	ldr	r3, [pc, #780]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	220c      	movs	r2, #12
 8001460:	4013      	ands	r3, r2
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00e      	beq.n	8001484 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001466:	4bc0      	ldr	r3, [pc, #768]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	220c      	movs	r2, #12
 800146c:	4013      	ands	r3, r2
 800146e:	2b08      	cmp	r3, #8
 8001470:	d116      	bne.n	80014a0 <HAL_RCC_OscConfig+0x64>
 8001472:	4bbd      	ldr	r3, [pc, #756]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	025b      	lsls	r3, r3, #9
 800147a:	401a      	ands	r2, r3
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	429a      	cmp	r2, r3
 8001482:	d10d      	bne.n	80014a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4bb8      	ldr	r3, [pc, #736]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x56>
 8001490:	e070      	b.n	8001574 <HAL_RCC_OscConfig+0x138>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d000      	beq.n	800149c <HAL_RCC_OscConfig+0x60>
 800149a:	e06b      	b.n	8001574 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e2d8      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d107      	bne.n	80014b8 <HAL_RCC_OscConfig+0x7c>
 80014a8:	4baf      	ldr	r3, [pc, #700]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4bae      	ldr	r3, [pc, #696]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	0249      	lsls	r1, r1, #9
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e02f      	b.n	8001518 <HAL_RCC_OscConfig+0xdc>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10c      	bne.n	80014da <HAL_RCC_OscConfig+0x9e>
 80014c0:	4ba9      	ldr	r3, [pc, #676]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4ba8      	ldr	r3, [pc, #672]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	49a9      	ldr	r1, [pc, #676]	; (800176c <HAL_RCC_OscConfig+0x330>)
 80014c8:	400a      	ands	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	4ba6      	ldr	r3, [pc, #664]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4ba5      	ldr	r3, [pc, #660]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014d2:	49a7      	ldr	r1, [pc, #668]	; (8001770 <HAL_RCC_OscConfig+0x334>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e01e      	b.n	8001518 <HAL_RCC_OscConfig+0xdc>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10e      	bne.n	8001500 <HAL_RCC_OscConfig+0xc4>
 80014e2:	4ba1      	ldr	r3, [pc, #644]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4ba0      	ldr	r3, [pc, #640]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	02c9      	lsls	r1, r1, #11
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	4b9d      	ldr	r3, [pc, #628]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b9c      	ldr	r3, [pc, #624]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0249      	lsls	r1, r1, #9
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xdc>
 8001500:	4b99      	ldr	r3, [pc, #612]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b98      	ldr	r3, [pc, #608]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001506:	4999      	ldr	r1, [pc, #612]	; (800176c <HAL_RCC_OscConfig+0x330>)
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	4b96      	ldr	r3, [pc, #600]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b95      	ldr	r3, [pc, #596]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001512:	4997      	ldr	r1, [pc, #604]	; (8001770 <HAL_RCC_OscConfig+0x334>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d014      	beq.n	800154a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fd1c 	bl	8000f5c <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152a:	f7ff fd17 	bl	8000f5c <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b64      	cmp	r3, #100	; 0x64
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e28a      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153c:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	4013      	ands	r3, r2
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0xee>
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fd07 	bl	8000f5c <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fd02 	bl	8000f5c <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e275      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	4b80      	ldr	r3, [pc, #512]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x118>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d100      	bne.n	8001582 <HAL_RCC_OscConfig+0x146>
 8001580:	e069      	b.n	8001656 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001582:	4b79      	ldr	r3, [pc, #484]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	220c      	movs	r2, #12
 8001588:	4013      	ands	r3, r2
 800158a:	d00b      	beq.n	80015a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800158c:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	220c      	movs	r2, #12
 8001592:	4013      	ands	r3, r2
 8001594:	2b08      	cmp	r3, #8
 8001596:	d11c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x196>
 8001598:	4b73      	ldr	r3, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	4013      	ands	r3, r2
 80015a2:	d116      	bne.n	80015d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e24b      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	22f8      	movs	r2, #248	; 0xf8
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	00da      	lsls	r2, r3, #3
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d0:	e041      	b.n	8001656 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d024      	beq.n	8001624 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b62      	ldr	r3, [pc, #392]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fcb9 	bl	8000f5c <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fcb4 	bl	8000f5c <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e227      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d0f1      	beq.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	22f8      	movs	r2, #248	; 0xf8
 8001612:	4393      	bics	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00da      	lsls	r2, r3, #3
 800161c:	4b52      	ldr	r3, [pc, #328]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e018      	b.n	8001656 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b4f      	ldr	r3, [pc, #316]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fc94 	bl	8000f5c <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fc8f 	bl	8000f5c <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e202      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2202      	movs	r2, #2
 8001652:	4013      	ands	r3, r2
 8001654:	d1f1      	bne.n	800163a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2208      	movs	r2, #8
 800165c:	4013      	ands	r3, r2
 800165e:	d036      	beq.n	80016ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d019      	beq.n	800169c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800166a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff fc72 	bl	8000f5c <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff fc6d 	bl	8000f5c <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1e0      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d0f1      	beq.n	800167e <HAL_RCC_OscConfig+0x242>
 800169a:	e018      	b.n	80016ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800169e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a0:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	438a      	bics	r2, r1
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff fc58 	bl	8000f5c <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fc53 	bl	8000f5c <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1c6      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f1      	bne.n	80016b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2204      	movs	r2, #4
 80016d4:	4013      	ands	r3, r2
 80016d6:	d100      	bne.n	80016da <HAL_RCC_OscConfig+0x29e>
 80016d8:	e0b4      	b.n	8001844 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016da:	201f      	movs	r0, #31
 80016dc:	183b      	adds	r3, r7, r0
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	055b      	lsls	r3, r3, #21
 80016ea:	4013      	ands	r3, r2
 80016ec:	d110      	bne.n	8001710 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	0549      	lsls	r1, r1, #21
 80016f8:	430a      	orrs	r2, r1
 80016fa:	61da      	str	r2, [r3, #28]
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	69da      	ldr	r2, [r3, #28]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	055b      	lsls	r3, r3, #21
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800170a:	183b      	adds	r3, r7, r0
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4013      	ands	r3, r2
 800171a:	d11a      	bne.n	8001752 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	0049      	lsls	r1, r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff fc17 	bl	8000f5c <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7ff fc12 	bl	8000f5c <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e185      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4013      	ands	r3, r2
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10e      	bne.n	8001778 <HAL_RCC_OscConfig+0x33c>
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 800175c:	6a1a      	ldr	r2, [r3, #32]
 800175e:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_RCC_OscConfig+0x32c>)
 8001760:	2101      	movs	r1, #1
 8001762:	430a      	orrs	r2, r1
 8001764:	621a      	str	r2, [r3, #32]
 8001766:	e035      	b.n	80017d4 <HAL_RCC_OscConfig+0x398>
 8001768:	40021000 	.word	0x40021000
 800176c:	fffeffff 	.word	0xfffeffff
 8001770:	fffbffff 	.word	0xfffbffff
 8001774:	40007000 	.word	0x40007000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x35e>
 8001780:	4bb6      	ldr	r3, [pc, #728]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	4bb5      	ldr	r3, [pc, #724]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	4bb3      	ldr	r3, [pc, #716]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	4bb2      	ldr	r3, [pc, #712]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001792:	2104      	movs	r1, #4
 8001794:	438a      	bics	r2, r1
 8001796:	621a      	str	r2, [r3, #32]
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x398>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x380>
 80017a2:	4bae      	ldr	r3, [pc, #696]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	4bad      	ldr	r3, [pc, #692]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017a8:	2104      	movs	r1, #4
 80017aa:	430a      	orrs	r2, r1
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	4bab      	ldr	r3, [pc, #684]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	4baa      	ldr	r3, [pc, #680]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	621a      	str	r2, [r3, #32]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x398>
 80017bc:	4ba7      	ldr	r3, [pc, #668]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	4ba6      	ldr	r3, [pc, #664]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	621a      	str	r2, [r3, #32]
 80017c8:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017ca:	6a1a      	ldr	r2, [r3, #32]
 80017cc:	4ba3      	ldr	r3, [pc, #652]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017ce:	2104      	movs	r1, #4
 80017d0:	438a      	bics	r2, r1
 80017d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d014      	beq.n	8001806 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fbbe 	bl	8000f5c <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e009      	b.n	80017fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fbb9 	bl	8000f5c <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4a9b      	ldr	r2, [pc, #620]	; (8001a60 <HAL_RCC_OscConfig+0x624>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e12b      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	4b98      	ldr	r3, [pc, #608]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
 8001804:	e013      	b.n	800182e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fba9 	bl	8000f5c <HAL_GetTick>
 800180a:	0003      	movs	r3, r0
 800180c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	e009      	b.n	8001824 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff fba4 	bl	8000f5c <HAL_GetTick>
 8001814:	0002      	movs	r2, r0
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	4a91      	ldr	r2, [pc, #580]	; (8001a60 <HAL_RCC_OscConfig+0x624>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e116      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	4b8d      	ldr	r3, [pc, #564]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800182e:	231f      	movs	r3, #31
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800183a:	69da      	ldr	r2, [r3, #28]
 800183c:	4b87      	ldr	r3, [pc, #540]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800183e:	4989      	ldr	r1, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x628>)
 8001840:	400a      	ands	r2, r1
 8001842:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	4013      	ands	r3, r2
 800184c:	d063      	beq.n	8001916 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d12a      	bne.n	80018ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001856:	4b81      	ldr	r3, [pc, #516]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800185c:	2104      	movs	r1, #4
 800185e:	430a      	orrs	r2, r1
 8001860:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001862:	4b7e      	ldr	r3, [pc, #504]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001866:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff fb75 	bl	8000f5c <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001878:	f7ff fb70 	bl	8000f5c <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e0e3      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800188a:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d0f1      	beq.n	8001878 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001894:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	22f8      	movs	r2, #248	; 0xf8
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	00da      	lsls	r2, r3, #3
 80018a4:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
 80018aa:	e034      	b.n	8001916 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	3305      	adds	r3, #5
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018b4:	4b69      	ldr	r3, [pc, #420]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018ba:	2104      	movs	r1, #4
 80018bc:	438a      	bics	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018c0:	4b66      	ldr	r3, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	22f8      	movs	r2, #248	; 0xf8
 80018c6:	4393      	bics	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	00da      	lsls	r2, r3, #3
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
 80018d6:	e01e      	b.n	8001916 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018dc:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018de:	2104      	movs	r1, #4
 80018e0:	430a      	orrs	r2, r1
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018e4:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e8:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	438a      	bics	r2, r1
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fb34 	bl	8000f5c <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018fa:	f7ff fb2f 	bl	8000f5c <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e0a2      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d1f1      	bne.n	80018fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d100      	bne.n	8001920 <HAL_RCC_OscConfig+0x4e4>
 800191e:	e097      	b.n	8001a50 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	220c      	movs	r2, #12
 8001926:	4013      	ands	r3, r2
 8001928:	2b08      	cmp	r3, #8
 800192a:	d100      	bne.n	800192e <HAL_RCC_OscConfig+0x4f2>
 800192c:	e06b      	b.n	8001a06 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d14c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800193c:	494a      	ldr	r1, [pc, #296]	; (8001a68 <HAL_RCC_OscConfig+0x62c>)
 800193e:	400a      	ands	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fb0b 	bl	8000f5c <HAL_GetTick>
 8001946:	0003      	movs	r3, r0
 8001948:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fb06 	bl	8000f5c <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e079      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	049b      	lsls	r3, r3, #18
 8001966:	4013      	ands	r3, r2
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	220f      	movs	r2, #15
 8001970:	4393      	bics	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800197a:	430a      	orrs	r2, r1
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0x630>)
 8001984:	4013      	ands	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	431a      	orrs	r2, r3
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	0449      	lsls	r1, r1, #17
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fad9 	bl	8000f5c <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fad4 	bl	8000f5c <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e047      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	049b      	lsls	r3, r3, #18
 80019ca:	4013      	ands	r3, r2
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x574>
 80019ce:	e03f      	b.n	8001a50 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80019d6:	4924      	ldr	r1, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x62c>)
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fabe 	bl	8000f5c <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff fab9 	bl	8000f5c <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e02c      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	049b      	lsls	r3, r3, #18
 8001a00:	4013      	ands	r3, r2
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5aa>
 8001a04:	e024      	b.n	8001a50 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e01f      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x620>)
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	401a      	ands	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d10e      	bne.n	8001a4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	220f      	movs	r2, #15
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	23f0      	movs	r3, #240	; 0xf0
 8001a40:	039b      	lsls	r3, r3, #14
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b008      	add	sp, #32
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	00001388 	.word	0x00001388
 8001a64:	efffffff 	.word	0xefffffff
 8001a68:	feffffff 	.word	0xfeffffff
 8001a6c:	ffc2ffff 	.word	0xffc2ffff

08001a70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b3      	b.n	8001bec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d911      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b58      	ldr	r3, [pc, #352]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4b55      	ldr	r3, [pc, #340]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e09a      	b.n	8001bec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d015      	beq.n	8001aec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d006      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001aca:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001ad0:	21e0      	movs	r1, #224	; 0xe0
 8001ad2:	00c9      	lsls	r1, r1, #3
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	22f0      	movs	r2, #240	; 0xf0
 8001ade:	4393      	bics	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	d040      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	029b      	lsls	r3, r3, #10
 8001b06:	4013      	ands	r3, r2
 8001b08:	d114      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06e      	b.n	8001bec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	049b      	lsls	r3, r3, #18
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d108      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e062      	b.n	8001bec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e05b      	b.n	8001bec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff fa08 	bl	8000f5c <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff fa03 	bl	8000f5c <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x18c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e042      	b.n	8001bec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1ec      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d211      	bcs.n	8001baa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_RCC_ClockConfig+0x184>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e020      	b.n	8001bec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d009      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_RCC_ClockConfig+0x190>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bc8:	f000 f820 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bcc:	0001      	movs	r1, r0
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x188>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x194>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	000a      	movs	r2, r1
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x198>)
 8001be2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f7ff f973 	bl	8000ed0 <HAL_InitTick>
  
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b004      	add	sp, #16
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	fffff8ff 	.word	0xfffff8ff
 8001c04:	08002064 	.word	0x08002064
 8001c08:	2000001c 	.word	0x2000001c

08001c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b08f      	sub	sp, #60	; 0x3c
 8001c10:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c12:	2314      	movs	r3, #20
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	4a2b      	ldr	r2, [pc, #172]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c26:	c313      	stmia	r3!, {r0, r1, r4}
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d002      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0x4a>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d003      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x50>
 8001c54:	e02d      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5a:	e02d      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	220f      	movs	r2, #15
 8001c62:	4013      	ands	r3, r2
 8001c64:	2214      	movs	r2, #20
 8001c66:	18ba      	adds	r2, r7, r2
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	220f      	movs	r2, #15
 8001c72:	4013      	ands	r3, r2
 8001c74:	1d3a      	adds	r2, r7, #4
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	4013      	ands	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c88:	f7fe fa3e 	bl	8000108 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	001a      	movs	r2, r3
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	4353      	muls	r3, r2
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
 8001c96:	e009      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	0152      	lsls	r2, r2, #5
 8001c9e:	1a52      	subs	r2, r2, r1
 8001ca0:	0193      	lsls	r3, r2, #6
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	185b      	adds	r3, r3, r1
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb0:	e002      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b00f      	add	sp, #60	; 0x3c
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	08001dc4 	.word	0x08001dc4
 8001cc8:	08001dd4 	.word	0x08001dd4
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200

08001cd4 <__libc_init_array>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	2600      	movs	r6, #0
 8001cd8:	4d0c      	ldr	r5, [pc, #48]	; (8001d0c <__libc_init_array+0x38>)
 8001cda:	4c0d      	ldr	r4, [pc, #52]	; (8001d10 <__libc_init_array+0x3c>)
 8001cdc:	1b64      	subs	r4, r4, r5
 8001cde:	10a4      	asrs	r4, r4, #2
 8001ce0:	42a6      	cmp	r6, r4
 8001ce2:	d109      	bne.n	8001cf8 <__libc_init_array+0x24>
 8001ce4:	2600      	movs	r6, #0
 8001ce6:	f000 f821 	bl	8001d2c <_init>
 8001cea:	4d0a      	ldr	r5, [pc, #40]	; (8001d14 <__libc_init_array+0x40>)
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <__libc_init_array+0x44>)
 8001cee:	1b64      	subs	r4, r4, r5
 8001cf0:	10a4      	asrs	r4, r4, #2
 8001cf2:	42a6      	cmp	r6, r4
 8001cf4:	d105      	bne.n	8001d02 <__libc_init_array+0x2e>
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	00b3      	lsls	r3, r6, #2
 8001cfa:	58eb      	ldr	r3, [r5, r3]
 8001cfc:	4798      	blx	r3
 8001cfe:	3601      	adds	r6, #1
 8001d00:	e7ee      	b.n	8001ce0 <__libc_init_array+0xc>
 8001d02:	00b3      	lsls	r3, r6, #2
 8001d04:	58eb      	ldr	r3, [r5, r3]
 8001d06:	4798      	blx	r3
 8001d08:	3601      	adds	r6, #1
 8001d0a:	e7f2      	b.n	8001cf2 <__libc_init_array+0x1e>
 8001d0c:	08002074 	.word	0x08002074
 8001d10:	08002074 	.word	0x08002074
 8001d14:	08002074 	.word	0x08002074
 8001d18:	08002078 	.word	0x08002078

08001d1c <memset>:
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	1882      	adds	r2, r0, r2
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d100      	bne.n	8001d26 <memset+0xa>
 8001d24:	4770      	bx	lr
 8001d26:	7019      	strb	r1, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	e7f9      	b.n	8001d20 <memset+0x4>

08001d2c <_init>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d32:	bc08      	pop	{r3}
 8001d34:	469e      	mov	lr, r3
 8001d36:	4770      	bx	lr

08001d38 <_fini>:
 8001d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3e:	bc08      	pop	{r3}
 8001d40:	469e      	mov	lr, r3
 8001d42:	4770      	bx	lr
